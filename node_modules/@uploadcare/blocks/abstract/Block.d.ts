export class Block extends BaseComponent<any> {
    /** @type {string | null} */
    static StateConsumerScope: string | null;
    static className: string;
    /** @param {String} [name] */
    static reg(name?: string | undefined): void;
    constructor();
    requireCtxName: boolean;
    init$: {
        '*blocksRegistry': Set<Block>;
        '*eventEmitter': EventEmitter | null;
    };
    /**
     * @param {String} str
     * @param {{ [key: string]: string | number }} variables
     * @returns {String}
     */
    l10n(str: string, variables?: {
        [key: string]: string | number;
    }): string;
    /**
     * @param {string} key
     * @param {number} count
     * @returns {string}
     */
    pluralize(key: string, count: number): string;
    /** @type {String} */
    activityType: string;
    /**
     * @private
     * @type {String[]}
     */
    private __l10nKeys;
    /**
     * @template {typeof import('../blocks/UploadCtxProvider/EventEmitter.js').EventType[keyof typeof import('../blocks/UploadCtxProvider/EventEmitter.js').EventType]} T
     * @param {T} type
     * @param {import('../blocks/UploadCtxProvider/EventEmitter.js').EventPayload[T]} [payload]
     * @param {{ debounce?: boolean | number }} [options]
     */
    emit<T extends "upload-start" | "remove" | "upload-progress" | "upload-finish" | "upload-error" | "validation-error" | "cloud-modification" | "data-output" | "done-flow" | "init-flow">(type: T, payload?: import("../types").EventPayload[T] | undefined, options?: {
        debounce?: number | boolean | undefined;
    } | undefined): void;
    /**
     * @param {String} localPropKey
     * @param {String} l10nKey
     */
    applyL10nKey(localPropKey: string, l10nKey: string): void;
    /**
     * @param {(block: Block) => boolean} callback
     * @returns {Boolean}
     */
    hasBlockInCtx(callback: (block: Block) => boolean): boolean;
    /**
     * @param {String} prop
     * @param {any} newVal
     */
    setOrAddState(prop: string, newVal: any): void;
    /** @param {String} activityType */
    setActivity(activityType: string): void;
    /**
     * Called when the last block is removed from the context. Note that inheritors must run their callback before that.
     *
     * @protected
     */
    protected destroyCtxCallback(): void;
    /**
     * @param {Number} bytes
     * @param {Number} [decimals]
     */
    fileSizeFmt(bytes: number, decimals?: number | undefined): string;
    /**
     * @param {String} url
     * @returns {String}
     */
    proxyUrl(url: string): string;
    /**
     * @param {String} prop
     * @protected
     */
    protected parseCfgProp(prop: string): {
        ctx: Data;
        name: string;
    };
    /** @returns {import('../types').ConfigType} } */
    get cfg(): import("../types").ConfigType;
    /** @private */
    private __cfgProxy;
    /**
     * @template {keyof import('../types').ConfigType} T
     * @param {T} key
     * @param {(value: import('../types').ConfigType[T]) => void} callback
     */
    subConfigValue<T_1 extends keyof import("../types").ConfigType>(key: T_1, callback: (value: import("../types").ConfigType[T_1]) => void): void;
    /** @deprecated */
    updateCtxCssData: () => void;
}
export { BaseComponent };
import { BaseComponent } from '@symbiotejs/symbiote';
import { EventEmitter } from '../blocks/UploadCtxProvider/EventEmitter.js';
import { Data } from '@symbiotejs/symbiote';
//# sourceMappingURL=Block.d.ts.map