export const EventType: Readonly<{
    UPLOAD_START: "upload-start";
    REMOVE: "remove";
    UPLOAD_PROGRESS: "upload-progress";
    UPLOAD_FINISH: "upload-finish";
    UPLOAD_ERROR: "upload-error";
    VALIDATION_ERROR: "validation-error";
    CLOUD_MODIFICATION: "cloud-modification";
    DATA_OUTPUT: "data-output";
    DONE_FLOW: "done-flow";
    INIT_FLOW: "init-flow";
}>;
/** Those are legacy events that are saved for backward compatibility. Should be removed before v1. */
export const GlobalEventType: Readonly<{
    "upload-start": "LR_UPLOAD_START";
    remove: "LR_REMOVE";
    "upload-progress": "LR_UPLOAD_PROGRESS";
    "upload-finish": "LR_UPLOAD_FINISH";
    "upload-error": "LR_UPLOAD_ERROR";
    "validation-error": "LR_VALIDATION_ERROR";
    "cloud-modification": "LR_CLOUD_MODIFICATION";
    "data-output": "LR_DATA_OUTPUT";
    "done-flow": "LR_DONE_FLOW";
    "init-flow": "LR_INIT_FLOW";
}>;
/**
 * @typedef {{
 *   [EventType.UPLOAD_START]: import('../../index.js').OutputFileEntry[];
 *   [EventType.REMOVE]: import('../../index.js').OutputFileEntry[];
 *   [EventType.UPLOAD_PROGRESS]: number;
 *   [EventType.UPLOAD_FINISH]: import('../../index.js').OutputFileEntry[];
 *   [EventType.UPLOAD_ERROR]: Error | null;
 *   [EventType.VALIDATION_ERROR]: string | null;
 *   [EventType.CLOUD_MODIFICATION]: string | null;
 *   [EventType.DATA_OUTPUT]: import('../../index.js').OutputFileEntry[];
 *   [EventType.DONE_FLOW]: never;
 *   [EventType.INIT_FLOW]: never;
 * }} EventPayload
 */
/**
 * @typedef {{
 *   [T in (typeof EventType)[keyof typeof EventType] as (typeof GlobalEventType)[T]]: {
 *     type: (typeof GlobalEventType)[T];
 *     ctx: string;
 *     data: EventPayload[T];
 *   };
 * }} GlobalEventPayload
 */
export class EventEmitter {
    /** @param {() => string} getCtxName */
    constructor(getCtxName: () => string);
    /**
     * @private
     * @type {Map<string, number>}
     */
    private _timeoutStore;
    /** @type {Set<import('../../abstract/Block.js').Block>} */
    _targets: Set<import('../../abstract/Block.js').Block>;
    /** @private */
    private _getCtxName;
    /** @param {import('../../abstract/Block.js').Block} target */
    bindTarget(target: import('../../abstract/Block.js').Block): void;
    /** @param {import('../../abstract/Block.js').Block} target */
    unbindTarget(target: import('../../abstract/Block.js').Block): void;
    /**
     * @private
     * @template {(typeof EventType)[keyof typeof EventType]} T
     * @param {T} type
     * @param {EventPayload[T]} [payload]
     */
    private _dispatch;
    /**
     * @template {(typeof EventType)[keyof typeof EventType]} T
     * @param {T} type
     * @param {EventPayload[T]} [payload]
     * @param {{ debounce?: boolean | number }} [options]
     */
    emit<T extends "upload-start" | "remove" | "upload-progress" | "upload-finish" | "upload-error" | "validation-error" | "cloud-modification" | "data-output" | "done-flow" | "init-flow">(type: T, payload?: EventPayload[T] | undefined, { debounce }?: {
        debounce?: number | boolean | undefined;
    } | undefined): void;
}
export type EventPayload = {
    [EventType.UPLOAD_START]: import('../../index.js').OutputFileEntry[];
    [EventType.REMOVE]: import('../../index.js').OutputFileEntry[];
    [EventType.UPLOAD_PROGRESS]: number;
    [EventType.UPLOAD_FINISH]: import('../../index.js').OutputFileEntry[];
    [EventType.UPLOAD_ERROR]: Error | null;
    [EventType.VALIDATION_ERROR]: string | null;
    [EventType.CLOUD_MODIFICATION]: string | null;
    [EventType.DATA_OUTPUT]: import('../../index.js').OutputFileEntry[];
    [EventType.DONE_FLOW]: never;
    [EventType.INIT_FLOW]: never;
};
export type GlobalEventPayload = {
    LR_UPLOAD_START: {
        type: "LR_UPLOAD_START";
        ctx: string;
        data: import("../../index.js").OutputFileEntry[];
    };
    LR_REMOVE: {
        type: "LR_REMOVE";
        ctx: string;
        data: import("../../index.js").OutputFileEntry[];
    };
    LR_UPLOAD_PROGRESS: {
        type: "LR_UPLOAD_PROGRESS";
        ctx: string;
        data: number;
    };
    LR_UPLOAD_FINISH: {
        type: "LR_UPLOAD_FINISH";
        ctx: string;
        data: import("../../index.js").OutputFileEntry[];
    };
    LR_UPLOAD_ERROR: {
        type: "LR_UPLOAD_ERROR";
        ctx: string;
        data: Error | null;
    };
    LR_VALIDATION_ERROR: {
        type: "LR_VALIDATION_ERROR";
        ctx: string;
        data: string | null;
    };
    LR_CLOUD_MODIFICATION: {
        type: "LR_CLOUD_MODIFICATION";
        ctx: string;
        data: string | null;
    };
    LR_DATA_OUTPUT: {
        type: "LR_DATA_OUTPUT";
        ctx: string;
        data: import("../../index.js").OutputFileEntry[];
    };
    LR_DONE_FLOW: {
        type: "LR_DONE_FLOW";
        ctx: string;
        data: never;
    };
    LR_INIT_FLOW: {
        type: "LR_INIT_FLOW";
        ctx: string;
        data: never;
    };
};
//# sourceMappingURL=EventEmitter.d.ts.map