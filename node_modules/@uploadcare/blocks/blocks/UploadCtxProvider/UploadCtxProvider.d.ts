export type UploadCtxProvider = (new () => {
    addEventListener<T extends "upload-start" | "remove" | "upload-progress" | "upload-finish" | "upload-error" | "validation-error" | "cloud-modification" | "data-output" | "done-flow" | "init-flow">(type: T, listener: (e: CustomEvent<import("./EventEmitter.js").EventPayload[T]>) => void, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<T_1 extends "upload-start" | "remove" | "upload-progress" | "upload-finish" | "upload-error" | "validation-error" | "cloud-modification" | "data-output" | "done-flow" | "init-flow">(type: T_1, listener: (e: CustomEvent<import("./EventEmitter.js").EventPayload[T_1]>) => void, options?: boolean | EventListenerOptions): void;
} & UploadCtxProviderClass) & Omit<typeof UploadCtxProviderClass, "new">;
/**
 * @typedef {import('../../utils/mixinClass.js').MixinClass<
 *   typeof UploadCtxProviderClass,
 *   {
 *     addEventListener<
 *       T extends typeof import('./EventEmitter.js').EventType[keyof typeof import('./EventEmitter.js').EventType]
 *     >(
 *       type: T,
 *       listener: (e: CustomEvent<import('./EventEmitter.js').EventPayload[T]>) => void,
 *       options?: boolean | AddEventListenerOptions
 *     ): void;
 *     removeEventListener<
 *       T extends typeof import('./EventEmitter.js').EventType[keyof typeof import('./EventEmitter.js').EventType]
 *     >(
 *       type: T,
 *       listener: (e: CustomEvent<import('./EventEmitter.js').EventPayload[T]>) => void,
 *       options?: boolean | EventListenerOptions
 *     ): void;
 *   }
 * >} UploadCtxProvider
 */
export const UploadCtxProvider: UploadCtxProvider;
declare class UploadCtxProviderClass extends UploaderBlock {
}
import { UploaderBlock } from '../../abstract/UploaderBlock.js';
export {};
//# sourceMappingURL=UploadCtxProvider.d.ts.map