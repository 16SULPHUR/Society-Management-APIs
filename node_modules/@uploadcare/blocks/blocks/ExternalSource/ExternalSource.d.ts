/** @typedef {{ externalSourceType: string }} ActivityParams */
/**
 * @typedef {{
 *   type: 'file-selected';
 *   obj_type: 'selected_file';
 *   filename: string;
 *   url: string;
 *   alternatives?: Record<string, string>;
 * }} SelectedFileMessage
 */
/**
 * @typedef {{
 *   type: 'embed-css';
 *   style: string;
 * }} EmbedCssMessage
 */
/** @typedef {SelectedFileMessage | EmbedCssMessage} Message */
export class ExternalSource extends UploaderBlock {
    activityType: "external";
    init$: {
        activityIcon: string;
        activityCaption: string;
        selectedList: never[];
        counter: number;
        onDone: () => void;
        onCancel: () => void;
        '*commonProgress': number;
        '*uploadList': never[];
        '*outputData': null;
        '*focusedEntry': null;
        '*uploadMetadata': null;
        '*uploadQueue': import("@uploadcare/upload-client").Queue;
        '*uploadCollection': null;
        '*currentActivity': string;
        '*currentActivityParams': {};
        '*history': never[];
        /** @typedef {{ externalSourceType: string }} ActivityParams */
        /**
         * @typedef {{
         *   type: 'file-selected';
         *   obj_type: 'selected_file';
         *   filename: string;
         *   url: string;
         *   alternatives?: Record<string, string>;
         * }} SelectedFileMessage
         */
        /**
         * @typedef {{
         *   type: 'embed-css';
         *   style: string;
         * }} EmbedCssMessage
         */
        /** @typedef {SelectedFileMessage | EmbedCssMessage} Message */
        '*historyBack': null;
        '*closeModal': () => void;
        '*blocksRegistry': Set<import("../../index.js").Block>;
        '*eventEmitter': import("../UploadCtxProvider/EventEmitter.js").EventEmitter | null;
    };
    /**
     * @private
     * @type {HTMLIFrameElement | null}
     */
    private _iframe;
    /**
     * @private
     * @param {SelectedFileMessage} message
     */
    private extractUrlFromMessage;
    /**
     * @private
     * @param {Message} message
     */
    private sendMessage;
    /**
     * @private
     * @param {SelectedFileMessage} message
     */
    private handleFileSelected;
    /** @private */
    private handleIframeLoad;
    /** @private */
    private _inheritedUpdateCssData;
    /**
     * @private
     * @param {string} propName
     */
    private getCssValue;
    /** @private */
    private applyStyles;
    /** @private */
    private remoteUrl;
    /** @private */
    private mountIframe;
    /** @private */
    private unmountIframe;
}
export namespace ExternalSource {
    let template: string;
}
export type ActivityParams = {
    externalSourceType: string;
};
export type SelectedFileMessage = {
    type: 'file-selected';
    obj_type: 'selected_file';
    filename: string;
    url: string;
    alternatives?: Record<string, string>;
};
export type EmbedCssMessage = {
    type: 'embed-css';
    style: string;
};
export type Message = SelectedFileMessage | EmbedCssMessage;
import { UploaderBlock } from '../../abstract/UploaderBlock.js';
//# sourceMappingURL=ExternalSource.d.ts.map